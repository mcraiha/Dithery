@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime;

<section>
    <form>
        <header>
            <h2>Settings</h2>
        </header>
        <label for="dithermethod">Dither method:</label>
        <select id="dithermethod">
            <option value="all" selected>All</option>
            <option value="Atkinson">Atkinson</option>
            <option value="Burkes">Burkes</option>
            <option value="Fake">Fake / No dither</option>
            <option value="FloydSteinberg">FloydSteinberg</option>
            <option value="JarvisJudiceNinke">JarvisJudiceNinke</option>
            <option value="Sierra">Sierra</option>
            <option value="SierraLite">SierraLite</option>
            <option value="SierraTwoRow">SierraTwoRow</option>
            <option value="Stucki">Stucki</option>
        </select>
        <label for="colorreductionmethod">Color reduction method:</label>
        <select id="colorreductionmethod">
            <option value="Web safe" selected>Web safe (216 colors)</option>
        </select>
        <button type="button" @onclick="Dither">Dither</button>
    </form>
</section>

<section>
    <canvas id="dither01"></canvas>
</section>

@code {
    private static DitheringBase GetDitherer(string method, Func<object[],object[]> colorfunc) => 
    method switch
    {
        "Atkinson" => new AtkinsonDitheringRGBByte(colorfunc),
        "Burkes" => new BurkesDitheringRGBByte(colorfunc),
        "Fake" => new FakeDitheringRGBByte(colorfunc),
        "FloydSteinberg" => new FloydSteinbergDitheringRGBByte(colorfunc),
        "JarvisJudiceNinke" => new JarvisJudiceNinkeDitheringRGBByte(colorfunc),
        "Sierra" => new SierraDitheringRGBByte(colorfunc),
        "SierraLite" => new SierraLiteDitheringRGBByte(colorfunc),
        "SierraTwoRow" => new SierraTwoRowDitheringRGBByte(colorfunc),
        "Stucki" => new StuckiDitheringRGBByte(colorfunc),
        _ => throw new ArgumentException(message: "invalid dithering", paramName: method),
    };

    private static object[] TrueColorBytesToWebSafeColorBytes(object[] input)
    {
        int arrayLimit = 3;
        object[] returnArray = new object[input.Length];
        for (int i = 0; i < arrayLimit; i++)
        {
            returnArray[i] = (byte)(Math.Round((byte)input[i] / 51.0) * 51);
        }

        for (int i = arrayLimit; i < input.Length; i++)
        {
            returnArray[i] = (byte)input[i];
        }
        
        return returnArray;
    }

    private async Task Dither()
    {
        int width = await JSRuntime.InvokeAsync<int>("readWidthFromCanvas", "inputCanvas");

        int height = await JSRuntime.InvokeAsync<int>("readHeightFromCanvas", "inputCanvas");

        Console.WriteLine("´Resolution: " + width + " x " + height);

        uint[] imageBytes = await JSRuntime.InvokeAsync<uint[]>("readPixelDataFromCanvas", "inputCanvas");
        Console.WriteLine("Length: " + imageBytes.Length);

        byte[,,] returnValue = new byte[width, height, 4];
        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                returnValue[x, y, 0] = (byte)imageBytes[width * x + y + 0];
                returnValue[x, y, 1] = (byte)imageBytes[width * x + y + 1];
                returnValue[x, y, 2] = (byte)imageBytes[width * x + y + 2];
                returnValue[x, y, 3] = (byte)imageBytes[width * x + y + 3];
            }
        }

        TempByteImageFormat temp = new TempByteImageFormat(returnValue);

        DitheringBase ditherer = GetDitherer("Atkinson", TrueColorBytesToWebSafeColorBytes);
        temp = (TempByteImageFormat)ditherer.DoDithering(temp);
        
        List<uint> rawBytes = new List<uint>(width * height * 4);
        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {
                object[] pixels = temp.GetPixelChannels(x, y);
                rawBytes.Add((byte)pixels[0]);
                rawBytes.Add((byte)pixels[1]);
                rawBytes.Add((byte)pixels[2]);
                rawBytes.Add((byte)pixels[3]);
            }
        }

        Console.WriteLine("Raw Length: " + rawBytes.Count);

        await JSRuntime.InvokeVoidAsync("writePixelDataToCanvas", "dither01", width, height, rawBytes.ToArray());
    }
}